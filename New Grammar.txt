PROGRAM → <STATEMENT_LIST> → <STATEMENT> | { NEWLINE <STATEMENT_LIST> }
<STATEMENT> → <DECLARATION_STMT> | <INPUT_STMT> | <OUTPUT_STMT> | <FOR_STMT> | <SWITCH_STMT> | <ASSIGN_STMT>
<DECLARATION_STMT> → <DATA_TYPE> SPACE <VAR>
<ASSIGN_STMT> → [<DATA_TYPE> SPACE] <VAR> SPACE EQUAL_OP SPACE <EXPR> | [<DATA_TYPE> SPACE] <VAR> SPACE EQUAL_OP SPACE <CONST>
<INPUT_STMT> → %INPUT.GET SPACE "(" SPACE <VAR> SPACE ")"
<OUTPUT_STMT> → (%OUTPUT.PRINTLN | %OUTPUT.PRINT) SPACE "(" SPACE <VAR> SPACE ")" | (%OUTPUT.PRINT | %OUTPUT.PRINTLN) SPACE "(" SPACE <EXPR> SPACE ")"
<FOR_STMT> → %FOR SPACE "(" SPACE [<ASSIGN_STMT>] SPACE ";" SPACE [REL_EXPR] SPACE ";" SPACE [MATH_EXPR] ")" {INDENT <STATEMENT>}
<SWITCH_STMT> → %SWITCH SPACE "(" SPACE <VAR> SPACE ")" {NEWLINE INDENT <CASE> } [NEWLINE INDENT <DEFAULT>]
<CASE> → %CASE SPACE <CONST> SPACE ":" SPACE <STATEMENT> SPACE %STOP 
<DEFAULT> → %DEFAULT SPACE ":" SPACE <STATEMENT>
<EXPR> → <MATH_EXPR> | <REL_EXPR>
<MATH_EXPR> → <VAR> {(ADD_OP | SUBTR_OP) <VAR>} | <TERM> | <POST_INC> | <VAR> INCREMENT_OP | <VAR> DECREMENT_OP
<TERM> → <TERM> {(MULT_OP | DIVIDE_OP | DIV_OP | MODULO_OP) <TERM> | <FACTOR>
<FACTOR> → <FACTOR> {EXPONENT_OP <FACTOR>}
<REL_EXPR> → [%NOT] <REL_EXP> | (<VAR> | <CONST>) {(LESS_OP| LESSEQ_OP | GREATER_OP | GREATEREQ_OP | EQUALITY_OP) (<VAR> | <CONST> | <REL_EXPR2>)}  | <REL_EXPR2>
<REL_EXPR2> → <REL_EXP2> {%OR (<REL_EXPR> | <REL_EXPR3>)}
<REL_EXPR3> → <REL_EXPR3> {%AND <REL_EXP>}
<VAR> → IDENTIFIER
<CONST> → STRING | INTEGER | DECIMAL | CHARACTER | STRING